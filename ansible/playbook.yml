#
---

- hosts: "all"
  become: true

  vars:
    pmm_version: "2.26.0"
    pmm_server_host_port: "8443"

  tasks:
    # - name: Install aptitude using apt
    #   apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: "name={{ item }} state=latest update_cache=yes"
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull an image for pmm-server
      community.docker.docker_image:
        name: "percona/pmm-server:{{ pmm_version }}"
        source: pull

    - name: Create a persistent data container for server
      community.docker.docker_container:
        name: pmm-data
        state: present
        image: "percona/pmm-server:{{ pmm_version }}"
        volumes:
          - /srv

    - name: Start the pmm server
      community.docker.docker_container:
        name: pmm-server
        image: "percona/pmm-server:{{ pmm_version }}"
        state: started
        restart: yes
        detach: yes
        ports:
          - "{{ pmm_server_host_port }}:443"
        volumes_from:
        - pmm-data

    - name: Get info on pmm-server container
      community.docker.docker_container_info:
        name: pmm-server
      register: pmm_server_info

    - name: Set pmm-server ip
      set_fact:
        pmm_server_ip: "{{ pmm_server_info.container.NetworkSettings.IPAddress }}"
        pmm_server_port: "443"

    - name: Pause for 10 seconds to load pmm-server
      pause:
        seconds: 10

    - name: Pull an image for pmm-client
      community.docker.docker_image:
        name: "percona/pmm-client:{{ pmm_version }}"
        source: pull

    - name: Create a persistent data container for client
      community.docker.docker_container:
        name: pmm-client-data
        image: "percona/pmm-client:{{ pmm_version }}"
        state: present
        volumes:
          - /srv

    - name: Start the pmm client
      community.docker.docker_container:
        name: pmm-client
        image: "percona/pmm-client:{{ pmm_version }}"
        state: started
        env:
          PMM_AGENT_SERVER_ADDRESS: "{{ pmm_server_ip }}:{{ pmm_server_port }}"
          PMM_AGENT_SERVER_USERNAME: admin
          PMM_AGENT_SERVER_PASSWORD: admin
          PMM_AGENT_SERVER_INSECURE_TLS: "1"
          PMM_AGENT_SETUP: "1"
          PMM_AGENT_CONFIG_FILE: pmm-agent.yml
        volumes_from:
        - pmm-client-data

    - name: Get info on pmm-client container
      community.docker.docker_container_info:
        name: pmm-client
      register: pmm_client_info

    - name: Set pmm-client ip
      set_fact:
        pmm_client_ip: "{{ pmm_client_info.container.NetworkSettings.IPAddress }}"
        pmm_client_host_name: "{{ pmm_client_info.container.Config.Hostname }}"

    - name: Pull an image for mysql
      community.docker.docker_image:
        name: "mysql"
        source: pull

    - name: Start the mysql server
      community.docker.docker_container:
        name: mysql-server
        image: "mysql:latest"
        detach: yes
        state: started
        env:
          MYSQL_ROOT_PASSWORD: pass

    - name: Pause for 10 seconds to load mysql-server
      pause:
        seconds: 10

    - name: Run a sqript to setup pmm user
      community.docker.docker_container_exec:
        container: mysql-server
        command: "mysql -uroot -ppass -e \"CREATE USER 'pmm'@'{{ pmm_client_ip }}' IDENTIFIED BY 'pass' WITH MAX_USER_CONNECTIONS 10; GRANT SELECT, PROCESS, REPLICATION CLIENT, RELOAD, BACKUP_ADMIN ON *.* TO 'pmm'@'{{ pmm_client_ip }}';\""
        chdir: /root

    - name: Get info on mysql-server container
      community.docker.docker_container_info:
        name: mysql-server
      register: mysql_server_info

    - name: Set mysql-server ip
      set_fact:
        mysql_server_ip: "{{ mysql_server_info.container.NetworkSettings.IPAddress }}"
        mysql_server_port: "3306"
        mysql_node_name: TEST_MYSQL_NODE

    - name: Run a sqript to setup mysql node
      community.docker.docker_container_exec:
        container: pmm-client
        command: "pmm-admin add mysql --username=pmm --password=pass {{ mysql_node_name }} {{ mysql_server_ip }}:{{ mysql_server_port }}"
        chdir: /root
    
    - name: Save test data
      local_action: "shell rm -f ./testdata && echo \"pmmserverip={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ pmm_server_host_port }} servicename={{ mysql_node_name }} nodename={{ pmm_client_host_name }}\" >> ./testdata"
...